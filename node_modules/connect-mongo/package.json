{
  "_from": "connect-mongo",
  "_id": "connect-mongo@2.0.1",
  "_inBundle": false,
  "_integrity": "sha512-ghBvVq0SA0SkTFsbAB8HdF1+uoHdFJICSlrTklNloMKXuRpX9IuVBnG0DlKnXBZSQI0Joyaq22cazsrV9+5g2A==",
  "_location": "/connect-mongo",
  "_phantomChildren": {
    "bson": "1.0.6",
    "es6-promise": "3.2.1",
    "readable-stream": "2.2.7",
    "require_optional": "1.0.1"
  },
  "_requested": {
    "escapedName": "connect-mongo",
    "fetchSpec": "latest",
    "name": "connect-mongo",
    "raw": "connect-mongo",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-mongo/-/connect-mongo-2.0.1.tgz",
  "_shasum": "514d649cff1d5d5546c087193245bb54ff5b703b",
  "_spec": "connect-mongo",
  "_where": "C:\\Users\\PeterKafkakis\\Desktop\\COSC412Web",
  "bugs": {
    "url": "https://github.com/jdesboeufs/connect-mongo/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "kcbanner@gmail.com",
      "name": "Casey Banner"
    },
    {
      "email": "jerome.desboeufs@gmail.com",
      "name": "Jerome Desboeufs"
    }
  ],
  "dependencies": {
    "mongodb": "^2.0.36"
  },
  "deprecated": false,
  "description": "MongoDB session store for Express and Connect",
  "devDependencies": {
    "expect.js": "^0.3.1",
    "express-session": "^1.0.0",
    "mocha": "^4.0.1",
    "mongoose": "^4.1.2",
    "nyc": "^11.2.1",
    "xo": "^0.18.2"
  },
  "homepage": "https://github.com/jdesboeufs/connect-mongo#readme",
  "keywords": [
    "connect",
    "mongo",
    "mongodb",
    "session",
    "express"
  ],
  "license": "MIT",
  "name": "connect-mongo",
  "optionalDependencies": {},
  "readme": "# connect-mongo\r\n\r\nMongoDB session store for [Connect](https://github.com/senchalabs/connect) and [Express](http://expressjs.com/)\r\n\r\n[![npm version](https://img.shields.io/npm/v/connect-mongo.svg)](https://www.npmjs.com/package/connect-mongo)\r\n[![downloads](https://img.shields.io/npm/dm/connect-mongo.svg)](https://www.npmjs.com/package/connect-mongo)\r\n[![Build Status](https://travis-ci.org/jdesboeufs/connect-mongo.svg?branch=master)](https://travis-ci.org/jdesboeufs/connect-mongo)\r\n[![Coverage Status](https://coveralls.io/repos/jdesboeufs/connect-mongo/badge.svg?branch=master&service=github)](https://coveralls.io/github/jdesboeufs/connect-mongo?branch=master)\r\n[![Dependency Status](https://david-dm.org/jdesboeufs/connect-mongo.svg?style=flat)](https://david-dm.org/jdesboeufs/connect-mongo)\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/jdesboeufs/connect-mongo.svg)](https://greenkeeper.io/)\r\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\r\n\r\n## Compatibility\r\n\r\n* Support Express up to `5.0`\r\n* Support all Connect versions\r\n* Support [Mongoose](http://mongoosejs.com/index.html) `>= 4.1.2+`\r\n* Support [native MongoDB driver](http://mongodb.github.io/node-mongodb-native/) `>= 2.0.36`\r\n* Support Node.js 4, 6 and 8\r\n* Support [MongoDB](https://www.mongodb.com/) `>= 3.0`\r\n\r\nFor extended compatibility, see previous versions.\r\n\r\n## Usage\r\n\r\n### Express or Connect integration\r\n\r\nExpress `4.x`, `5.0` and Connect `3.x`:\r\n\r\n```js\r\nconst session = require('express-session');\r\nconst MongoStore = require('connect-mongo')(session);\r\n\r\napp.use(session({\r\n    secret: 'foo',\r\n    store: new MongoStore(options)\r\n}));\r\n```\r\n\r\nExpress `2.x`, `3.x` and Connect `1.x`, `2.x`:\r\n\r\n```js\r\nconst MongoStore = require('connect-mongo')(express);\r\n\r\napp.use(express.session({\r\n    secret: 'foo',\r\n    store: new MongoStore(options)\r\n}));\r\n```\r\n\r\nFor Connect `1.x` and `2.x`, just replace `express` by `connect`.\r\n\r\n### Connection to MongoDB\r\n\r\nIn many circumstances, `connect-mongo` will not be the only part of your application which need a connection to a MongoDB database. It could be interesting to re-use an existing connection.\r\n\r\nAlternatively, you can configure `connect-mongo` to establish a new connection.\r\n\r\n#### Re-use a Mongoose connection\r\n\r\n```js\r\nconst mongoose = require('mongoose');\r\n\r\n// Basic usage\r\nmongoose.connect(connectionOptions);\r\n\r\napp.use(session({\r\n    store: new MongoStore({ mongooseConnection: mongoose.connection })\r\n}));\r\n\r\n// Advanced usage\r\nconst connection = mongoose.createConnection(connectionOptions);\r\n\r\napp.use(session({\r\n    store: new MongoStore({ mongooseConnection: connection })\r\n}));\r\n```\r\n\r\n#### Re-use a native MongoDB driver connection (or a promise)\r\n\r\nIn this case, you just have to give your `Db` instance to `connect-mongo`.\r\nIf the connection is not opened, `connect-mongo` will do it for you.\r\n\r\n```js\r\n/*\r\n** There are many ways to create dbInstance.\r\n** You should refer to the driver documentation.\r\n*/\r\n\r\napp.use(session({\r\n    store: new MongoStore({ db: dbInstance })\r\n}));\r\n```\r\n\r\nOr just give a promise...\r\n\r\n```js\r\napp.use(session({\r\n    store: new MongoStore({ dbPromise: dbInstancePromise })\r\n}));\r\n```\r\n\r\n#### Create a new connection from a MongoDB connection string\r\n\r\n[MongoDB connection strings](http://docs.mongodb.org/manual/reference/connection-string/) are __the best way__ to configure a new connection. For advanced usage, [more options](http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html#mongoclient-connect-options) can be configured with `mongoOptions` property.\r\n\r\n```js\r\n// Basic usage\r\napp.use(session({\r\n    store: new MongoStore({ url: 'mongodb://localhost/test-app' })\r\n}));\r\n\r\n// Advanced usage\r\napp.use(session({\r\n    store: new MongoStore({\r\n        url: 'mongodb://user12345:foobar@localhost/test-app?authSource=admins&w=1',\r\n        mongoOptions: advancedOptions // See below for details\r\n    })\r\n}));\r\n```\r\n\r\n## Events\r\n\r\nA `MongoStore` instance will emit the following events:\r\n\r\n| Event name | Description | Payload\r\n| ----- | ----- | ----- |\r\n| `create` | A session has been created | `sessionId` |\r\n| `touch` | A session has been touched (but not modified) | `sessionId` |\r\n| `update` | A session has been updated | `sessionId` |\r\n| `set` | A session has been created OR updated _(for compatibility purpose)_ | `sessionId` |\r\n| `destroy` | A session has been destroyed | `sessionId` |\r\n\r\n## Session expiration\r\n\r\nWhen the session cookie has an expiration date, `connect-mongo` will use it.\r\n\r\nOtherwise, it will create a new one, using `ttl` option.\r\n\r\n```js\r\napp.use(session({\r\n    store: new MongoStore({\r\n      url: 'mongodb://localhost/test-app',\r\n      ttl: 14 * 24 * 60 * 60 // = 14 days. Default\r\n    })\r\n}));\r\n```\r\n\r\n__Note:__ Each time an user interacts with the server, its session expiration date is refreshed.\r\n\r\n## Remove expired sessions\r\n\r\nBy default, `connect-mongo` uses MongoDB's TTL collection feature (2.2+) to have mongod automatically remove expired sessions. But you can change this behavior.\r\n\r\n### Set MongoDB to clean expired sessions (default mode)\r\n\r\n`connect-mongo` will create a TTL index for you at startup. You MUST have MongoDB 2.2+ and administration permissions.\r\n\r\n```js\r\napp.use(session({\r\n    store: new MongoStore({\r\n      url: 'mongodb://localhost/test-app',\r\n      autoRemove: 'native' // Default\r\n    })\r\n}));\r\n```\r\n\r\n__Note:__ If you use `connect-mongo` in a very concurrent environment, you should avoid this mode and prefer setting the index yourself, once!\r\n\r\n### Set the compatibility mode\r\n\r\nYou have an older MongoDB version (compatible with connect-mongo) or you can't or don't want to create a TTL index.\r\n\r\n`connect-mongo` will take care of removing expired sessions, using defined interval.\r\n\r\n```js\r\napp.use(session({\r\n    store: new MongoStore({\r\n      url: 'mongodb://localhost/test-app',\r\n      autoRemove: 'interval',\r\n      autoRemoveInterval: 10 // In minutes. Default\r\n    })\r\n}));\r\n```\r\n\r\n### Disable expired sessions cleaning\r\n\r\nYou are in production environnement and/or you manage the TTL index elsewhere.\r\n\r\n```js\r\napp.use(session({\r\n    store: new MongoStore({\r\n      url: 'mongodb://localhost/test-app',\r\n      autoRemove: 'disabled'\r\n    })\r\n}));\r\n```\r\n\r\n## Lazy session update\r\n\r\n\r\nIf you are using [express-session](https://github.com/expressjs/session) >= [1.10.0](https://github.com/expressjs/session/releases/tag/v1.10.0) and don't want to resave all the session on database every single time that the user refresh the page, you can lazy update the session, by limiting a period of time.\r\n\r\n```js\r\napp.use(express.session({\r\n    secret: 'keyboard cat',\r\n    saveUninitialized: false, // don't create session until something stored\r\n\tresave: false, //don't save session if unmodified\r\n\tstore: new MongoStore({\r\n\t\turl: 'mongodb://localhost/test-app',\r\n\t\ttouchAfter: 24 * 3600 // time period in seconds\r\n\t})\r\n}));\r\n```\r\n\r\nby doing this, setting `touchAfter: 24 * 3600` you are saying to the session be updated only one time in a period of 24 hours, does not matter how many request's are made (with the exception of those that change something on the session data)\r\n\r\n## More options\r\n\r\n  - `collection` Collection (default: `sessions`)\r\n  - `fallbackMemory` Fallback to `MemoryStore`. Useful if you want to use MemoryStore in some case, like in development environment.\r\n  - `stringify` If true, connect-mongo will serialize sessions using `JSON.stringify` before\r\n                setting them, and deserialize them with `JSON.parse` when getting them.\r\n                (optional, default: true). This is useful if you are using types that\r\n                MongoDB doesn't support.\r\n  - `serialize` Custom hook for serializing sessions to MongoDB. This is helpful if you need\r\n                to modify the session before writing it out.\r\n  - `unserialize` Custom hook for unserializing sessions from MongoDB. This can be used in\r\n                scenarios where you need to support different types of serializations\r\n                (e.g., objects and JSON strings) or need to modify the session before using\r\n                it in your app.\r\n  - `transformId` (optional) Transform original sessionId in whatever you want to use as storage key.\r\n\r\n## Tests\r\n\r\n    npm test\r\n\r\nThe tests use a database called `connect-mongo-test`.\r\n\r\n## License\r\n\r\nThe MIT License\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jdesboeufs/connect-mongo.git"
  },
  "scripts": {
    "cover": "nyc report --reporter=text-lcov",
    "lint": "xo src",
    "test": "nyc mocha"
  },
  "version": "2.0.1",
  "xo": {
    "semicolon": false,
    "space": 2
  }
}
